import { AppService } from '../../app.service';
import { Action, Ctx, InjectBot, Message, On, Start, Update } from 'nestjs-telegraf';
import { Markup, Telegraf } from 'telegraf';
import { Context, TelegramUpdateMessage } from '../../main/types/context.interface';
import { UsersRepositories } from './repositories/users-repositories';
import {
  buttonsAnswers,
  buttonsGameMenu,
  buttonsMain,
  buttonsMenu,
  buttonsQuestions,
  buttonsToDo,
  buttonsToDo2,
} from '../../buttons/app.buttons';
import { User } from '../../entities/user.entity';
import { ConnectionQuizUseCase } from '../quiz/application/use-case/handlers/connection-quiz-use-case.service';
import { GameStatusesType } from '../../entities/game.entity';
import { AnswerQuizUseCase } from '../quiz/application/use-case/handlers/answer-quiz-handler';
import { showTasks } from '../../main/helpers/app.utilits';
import { Task } from '../../entities/task.entity';
import { QuizRepositories } from '../quiz/infrastructure/quiz-repositories';
import { AnswerStatusesType } from '../../entities/answer.entity';

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
    private readonly usersRepo: UsersRepositories,
    private readonly quizRepo: QuizRepositories,
    private readonly connectionQuizUseCase: ConnectionQuizUseCase,
    private readonly answerQuizUseCase: AnswerQuizUseCase,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    try {
      const idTelegram = ctx.from.id;
      const firstName = ctx.from.first_name;
      const lastName = ctx.from.last_name;
      const foundUser = await this.usersRepo.findUserById(idTelegram);
      if (!foundUser) {
        await ctx.replyWithHTML(
          '<b>Hi! \n\nMy good Friend ü¶ù</b>, \n\nWelcome to chat. üóø',
          buttonsMain(),
        );
        const user = await User.createUser(idTelegram, firstName, lastName);
        await this.usersRepo.saveUser(user);
      } else {
        await ctx.replyWithHTML(
          `<b>Hi! üëãüèΩ</b> \n\nNice to meet you here: <b>${firstName}</b>`,
          buttonsMain(),
        );
      }
    } catch (e) {
      console.log(e);
    }
  }

  @Action('main_menu')
  async mainMenu(ctx: Context) {
    try {
      const firstName = ctx.from.first_name;
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      await ctx.replyWithHTML(
        `–ü–æ—Å–º–æ—Ç—Ä–∏ üëÄ –∏ –≤—ã–±–∏—Ä–∏ <b>${firstName}</b> —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å: `,
        buttonsMenu(),
      );
    } catch (e) {
      console.log(e);
    }
  }

  @Action('game_menu')
  async gameMenu(ctx: Context) {
    try {
      const firstName = ctx.from.first_name;
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      await ctx.replyWithHTML(
        `<b>${firstName}</b> –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>üèÅ Start</b> —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.`,
        buttonsGameMenu(),
      );
    } catch (e) {
      console.log(e);
    }
  }

  @Action('todo_menu')
  async toDoMenu(ctx: Context) {
    try {
      const firstName = ctx.from.first_name;
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      await ctx.replyWithHTML(
        `<b>${firstName}</b> —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å üñä —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ. \n\ –ê —Ç–∞–∫–∂–µ –æ—Ç–∫—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏.`,
        Markup.inlineKeyboard([
          Markup.button.callback('üìú –°–ø–∏—Å–æ–∫ –¥–µ–ª', 'tasks'),
          Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_menu'),
        ]),
      );
    } catch (e) {
      console.log(e);
    }
  }

  @Action('back_main_menu')
  async backStepMainMenu(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      await ctx.replyWithHTML(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`, buttonsMain());
    } catch (e) {
      console.log(e);
    }
  }

  @Action('back_game_menu')
  async backStepGameMenu(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      await ctx.replyWithHTML(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é`, buttonsMenu());
    } catch (e) {
      console.log(e);
    }
  }

  @Action('back_menu')
  async backStepMenu(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      await ctx.replyWithHTML(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é`, buttonsMenu());
    } catch (e) {
      console.log(e);
    }
  }

  @Action('back_todo_menu')
  async backStepTodoMenu(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      await ctx.replyWithHTML(`–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é`, buttonsToDo());
    } catch (e) {
      console.log(e);
    }
  }

  @Action('tasks')
  async listTask(ctx: Context) {
    await ctx.deleteMessage();
    await ctx.answerCbQuery();
    const idTelegram = ctx.from.id;
    const listTasks = await this.usersRepo.findTask(idTelegram);
    if (!listTasks) {
      await ctx.replyWithHTML(
        `–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á üëÄ`,
        Markup.inlineKeyboard([
          Markup.button.callback('üìå –î–æ–±–∞–≤–∏—Ç—å', 'add'),
          Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_menu'),
        ]),
      );
    } else {
      await ctx.replyWithHTML(showTasks(ctx, listTasks), buttonsToDo2());
    }
  }

  @Action('done')
  async doneTask(ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.deleteMessage();
    ctx.session.type = 'done';
    await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞–Ω–∏—è:');
  }

  @Action('edit')
  async editTask(ctx: Context) {
    await ctx.answerCbQuery();
    ctx.session.type = 'edit';
    await ctx.deleteMessage();
    await ctx.replyWithHTML(
      '–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞–Ω–∏—è: –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n' + '–í —Ñ–æ—Ä–º–∞—Ç–µ: <b>1_–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>',
    );
  }

  @Action('add')
  async addTask(ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.deleteMessage();
    ctx.session.type = 'add';
    await ctx.replyWithHTML(
      '–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞–Ω–∏—è: –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n' + '–í —Ñ–æ—Ä–º–∞—Ç–µ: <b>1_–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>',
    );
  }

  @Action('remove')
  async deleteTask(ctx: Context) {
    await ctx.answerCbQuery();
    await ctx.deleteMessage();
    ctx.session.type = 'remove';
    await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞–Ω–∏—è:');
  }

  @Action('start_game')
  async gameStart(ctx: Context) {
    try {
      const firstName = ctx.from.first_name;
      const idTelegram = ctx.from.id;
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      const activeGame = await this.quizRepo.findActiveAndPendingGameByUserId(idTelegram);
      if (activeGame) {
        await ctx.replyWithHTML(
          `<b>${firstName}</b> —Ç—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ. \n\n–û–∂–∏–¥–∞–π—Ç–µ ‚åõÔ∏è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚ùå. \n\n–ò–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—á–∞—Ç—É—é –∏–≥—Ä—É`,
          buttonsQuestions(),
        );
        // await ctx.deleteMessage();
        return;
      }
      const game = await this.connectionQuizUseCase.execute(idTelegram, firstName);
      if (game.status === GameStatusesType.PendingSecondPlayer) {
        await ctx.replyWithHTML(`–û–∂–∏–¥–∞–π—Ç–µ ‚åõÔ∏è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ ‚ùå`);
      } else {
        await ctx.telegram.sendMessage(
          game.firstPlayerId,
          `${game.firstPlayerProgress.player.firstName} –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! üèÅ, –ª–æ–≤–∏ –≤–æ–ø—Ä–æ—Å—ã`,
          Markup.inlineKeyboard(
            [
              Markup.button.callback('–≤–æ–ø—Ä–æ—Å—ã ‚¨áÔ∏è', 'question'),
              Markup.button.callback('üîô –°–¥–∞—Ç—å—Å—è üè≥Ô∏è', 'back_game'),
            ],
            {
              columns: 1,
            },
          ),
        );
        await ctx.telegram.sendMessage(
          game.secondPlayerId,
          `${game.secondPlayerProgress.player.firstName} –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! üèÅ, –ª–æ–≤–∏ –≤–æ–ø—Ä–æ—Å—ã`,
          Markup.inlineKeyboard(
            [
              Markup.button.callback('–≤–æ–ø—Ä–æ—Å—ã ‚¨áÔ∏è', 'question'),
              Markup.button.callback('üîô –°–¥–∞—Ç—å—Å—è üè≥Ô∏è', 'back_game'),
            ],
            {
              columns: 1,
            },
          ),
        );
      }
    } catch (e) {
      console.log(e);
    }
  }

  @Action('info_game')
  async infoGames(ctx: Context) {
    try {
      const firstName = ctx.from.first_name;
      const idTelegram = ctx.from.id;
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      await ctx.replyWithHTML(
        `–ø–æ–∫–∞ –Ω–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–∏—Ç—å—Å—è`,
        buttonsQuestions(),
      );

      return;
    } catch (e) {
      console.log(e);
    }
  }

  @Action('question')
  async question(ctx: Context) {
    try {
      const idTelegram = ctx.from.id;
      const firstName = ctx.from.first_name;
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      const activeGame = await this.quizRepo.findActiveAndPendingGameByUserId(idTelegram);
      const player = await this.quizRepo.findPlayer(idTelegram, activeGame.id);
      if (player.answers.length === activeGame.questions.length) {
        await ctx.replyWithHTML(
          `${firstName} —Ç—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–∂–∏–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã!`,
        );
      }
      //what question!
      const question = activeGame.questions[player.answers.length];
      await ctx.replyWithHTML(
        `–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ \n\n–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–∏–∂–µ, –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤. \n\n<b>–í–æ–ø—Ä–æ—Å:</b>\n\n<b>${question.body}</b>`,
        buttonsAnswers(),
      );
    } catch (e) {
      console.log(e);
    }
  }

  @Action('answers')
  async answers(ctx: Context) {
    try {
      await ctx.answerCbQuery();
      await ctx.deleteMessage();
      ctx.session.type = 'answers';
      await ctx.replyWithHTML('–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤');
    } catch (e) {
      console.log(e);
    }
  }

  @On('text')
  async getMessage(
    @Message('text') message: string,
    @Ctx() ctx: Context,
    @Ctx() payload: TelegramUpdateMessage,
  ) {
    try {
      if (!ctx.session.type) return;
      const idTelegram = ctx.from.id;
      const firstName = ctx.from.first_name;
      if (
        payload.message.text.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç') ||
        payload.message.text.toLowerCase().includes('hi') ||
        payload.message.text.toLowerCase().includes('hello')
      ) {
        await ctx.deleteMessage();
        await ctx.replyWithHTML(`Hi! My good Friend -- <b>${payload.message.from.first_name}</b>`);
        return;
      }
      if (
        payload.message.text.toLowerCase().includes('–∏–≥—Ä–∞') ||
        payload.message.text.toLowerCase().includes('game')
      ) {
        await ctx.deleteMessage();
        await ctx.replyWithHTML(`–ò–≥—Ä–∞ <b>–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</b>`, buttonsGameMenu());
        return;
      }
      const [taskId, title] = message.split('_');
      if (!taskId) {
        await ctx.replyWithHTML(`<b>Sorry, –Ø —Ç—É–ø–∞–≤–∞—Ç—ã–π –±–æ—Ç ü§ñ.</b>`);
        return;
      }

      if (ctx.session.type === 'answers') {
        const answer = payload.message.text.toLowerCase();
        const gameActive = await this.quizRepo.findActiveGameByUserId(idTelegram);
        const answerView = await this.answerQuizUseCase.execute(idTelegram, answer);
        if (answerView.answerStatus === AnswerStatusesType.Correct) {
          await ctx.replyWithHTML(
            `<b>${firstName}</b> —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç <b>–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! üéâüéâüéâüéâ</b>`,
            buttonsQuestions(),
          );
        }
        if (answerView.answerStatus === AnswerStatusesType.Incorrect) {
          await ctx.replyWithHTML(
            `<b>${firstName}</b> —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç <b>–Ω–µ–≤–µ—Ä–Ω—ã–π ‚òπÔ∏è‚òπÔ∏è‚òπÔ∏è</b>`,
            buttonsQuestions(),
          );
        }
        const game = await this.quizRepo.findFinishedByUserId(idTelegram, gameActive.id);
        //checking the finish game!
        if (
          game.firstPlayerProgress.answers.length === 5 &&
          game.firstPlayerProgress.isAlert === false
        ) {
          await ctx.telegram.sendMessage(
            game.firstPlayerId,
            `${firstName} —Ç—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–∂–∏–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã! –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã —É–∑–Ω–∞–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`,
          );
          const firstPlayer = await this.quizRepo.findPlayerForAlert(game.firstPlayerId, game.id);
          firstPlayer.alert();
          await this.quizRepo.savePlayer(firstPlayer);
        }
        if (
          game.secondPlayerProgress.answers.length === 5 &&
          game.secondPlayerProgress.isAlert === false
        ) {
          await ctx.telegram.sendMessage(
            game.secondPlayerId,
            `${firstName} —Ç—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–∂–∏–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã! –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç—ã —É–∑–Ω–∞–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`,
          );
          const secondPlayer = await this.quizRepo.findPlayerForAlert(game.secondPlayerId, game.id);
          secondPlayer.alert();
          await this.quizRepo.savePlayer(secondPlayer);
        }
        if (
          game.firstPlayerProgress.answers.length === 5 &&
          game.secondPlayerProgress.answers.length === 5
        ) {
          const firstPlayer = await this.quizRepo.findPlayerForAlert(game.firstPlayerId, game.id);
          const secondPlayer = await this.quizRepo.findPlayerForAlert(game.secondPlayerId, game.id);
          if (firstPlayer.score > secondPlayer.score) {
            await ctx.telegram.sendMessage(
              game.firstPlayerId,
              `${firstPlayer.firstName} —Ç—ã –≤—ã–π–≥—Ä–∞–ª –º–æ–ª–æ–¥—á–∏–Ω–∞ —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å üéâüéâüéâüéâüéâ! –¢—ã –Ω–∞–±—Ä–∞–ª: ${firstPlayer.score} points. –ê —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª: ${secondPlayer.score} points.`,
              buttonsGameMenu(),
            );
            await ctx.telegram.sendMessage(
              game.secondPlayerId,
              `${secondPlayer.firstName} –ø–æ–±–µ–¥–∞ –±—ã–ª–∞ —Ä—è–¥–æ–º –Ω–æ —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –±–æ–ª—å—à–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤. –¢—ã –Ω–∞–±—Ä–∞–ª: ${secondPlayer.score} points. –ê —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª: ${firstPlayer.score} points.`,
              buttonsGameMenu(),
            );
            return;
          }
          if (firstPlayer.score < secondPlayer.score) {
            await ctx.telegram.sendMessage(
              game.secondPlayerId,
              `${secondPlayer.firstName} —Ç—ã –≤—ã–π–≥—Ä–∞–ª –º–æ–ª–æ–¥—á–∏–Ω–∞ —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å üéâüéâüéâüéâüéâ! –¢—ã –Ω–∞–±—Ä–∞–ª: ${secondPlayer.score} points. –ê —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª: ${firstPlayer.score} points.`,
              buttonsGameMenu(),
            );
            await ctx.telegram.sendMessage(
              game.firstPlayerId,
              `${firstPlayer.firstName} –ø–æ–±–µ–¥–∞ –±—ã–ª–∞ —Ä—è–¥–æ–º –Ω–æ —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –±–æ–ª—å—à–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤.  –¢—ã –Ω–∞–±—Ä–∞–ª: ${firstPlayer.score} points. –ê —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª: ${secondPlayer.score} points.`,
              buttonsGameMenu(),
            );
            return;
          }
          if (firstPlayer.score === secondPlayer.score) {
            await ctx.telegram.sendMessage(
              game.firstPlayerId,
              `${firstPlayer.firstName} —Ç—ã –Ω–∞–±—Ä–∞–ª –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤ –∫–∞–∫ –∏ —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫. –í —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ —Å–æ–±–µ—Ä–∏—Å—å –∏ –ø–æ–±–µ–¥–∏. –¢—ã –Ω–∞–±—Ä–∞–ª: ${firstPlayer.score} points. –ê —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª: ${secondPlayer.score} points.`,
              buttonsGameMenu(),
            );
            await ctx.telegram.sendMessage(
              game.secondPlayerId,
              `${secondPlayer.firstName} —Ç—ã –Ω–∞–±—Ä–∞–ª –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤ –∫–∞–∫ –∏ —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫. –í —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ —Å–æ–±–µ—Ä–∏—Å—å –∏ –ø–æ–±–µ–¥–∏. –¢—ã –Ω–∞–±—Ä–∞–ª: ${firstPlayer.score} points. –ê —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª: ${secondPlayer.score} points.`,
              buttonsGameMenu(),
            );
            return;
          }
          return;
        }
        return;
      }
      if (ctx.session.type === 'remove') {
        // await ctx.deleteMessage();
        const task = await this.usersRepo.findTaskByIdTask(Number(taskId));
        if (!task) {
          await ctx.deleteMessage();
          await ctx.reply(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å id: ${message}`, buttonsToDo2());
          return;
        }
        await this.usersRepo.deleteTask(Number(taskId));
        const todos = await this.usersRepo.findTask(idTelegram);
        if (!todos) {
          await ctx.deleteMessage();
          await ctx.replyWithHTML(
            `<b>–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á üìù</b>`,
            Markup.inlineKeyboard(
              [
                Markup.button.callback('üìå –î–æ–±–∞–≤–∏—Ç—å', 'add'),
                Markup.button.callback('üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_menu'),
              ],
              {
                columns: 1,
              },
            ),
          );
          return;
        }
        await ctx.replyWithHTML(showTasks(ctx, todos), buttonsToDo2());
        return;
      }
      if (ctx.session.type === 'done') {
        await ctx.deleteMessage();
        const task = await this.usersRepo.findTaskByIdTask(Number(taskId));
        if (!task) {
          await ctx.replyWithHTML(
            `<b>–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å id_</b>${message}. \n\n–ù–∞–ø–∏—à–∏ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π id :)`,
            buttonsToDo2(),
          );
          return;
        }
        task.isCompletedTask();
        await this.usersRepo.saveTask(task);
        const todos = await this.usersRepo.findTask(idTelegram);
        await ctx.replyWithHTML(showTasks(ctx, todos), buttonsToDo2());
        return;
      }
      if (!title) {
        await ctx.deleteMessage();
        await ctx.replyWithHTML(
          `<b>Sorry</b>, —è —Ç—É–ø–∞–≤–∞—Ç—ã–π –±–æ—Ç ü§ñ. \n\n     –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ`,
        );
        return;
      }
      if (ctx.session.type === 'add') {
        await ctx.deleteMessage();
        const user = await this.usersRepo.findUserById(idTelegram);
        const task = Task.createTask(Number(taskId), idTelegram, title, user);
        await this.usersRepo.saveTask(task);
        const todo = await this.usersRepo.findTask(idTelegram);
        if (!todo) {
          await ctx.deleteMessage();
          await ctx.reply(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å id: ${message}`, buttonsToDo2());
          return;
        }
        await ctx.replyWithHTML(showTasks(ctx, todo), buttonsToDo2());
        return;
      }
      if (ctx.session.type === 'edit') {
        await ctx.deleteMessage();
        const task = await this.usersRepo.findTaskByIdTask(Number(taskId));
        if (!task) {
          await ctx.deleteMessage();
          await ctx.reply(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å id: ${message}`, buttonsToDo2());
          return;
        }
        task.updateTask(title);
        await this.usersRepo.saveTask(task);
        const todos = await this.usersRepo.findTask(idTelegram);
        await ctx.replyWithHTML(showTasks(ctx, todos), buttonsToDo2());
        return;
      }
      return;
    } catch (e) {
      // await ctx.replyWithHTML(`<b>Sorry, –Ø —Ç—É–ø–∞–≤–∞—Ç—ã–π –±–æ—Ç ü§ñ. —Ç—ã —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—à—å –Ω–µ —Ç–∞–∫)))</b>`);
      console.log(e);
    }
  }
}
